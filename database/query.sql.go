// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package database

import (
	"context"
	"database/sql"
)

const createSession = `-- name: CreateSession :execresult
INSERT INTO sessions (session_id, user_id, expires_at) VALUES (?, ?, ?)
`

type CreateSessionParams struct {
	SessionID string
	UserID    int64
	ExpiresAt int64
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createSession, arg.SessionID, arg.UserID, arg.ExpiresAt)
}

const createUser = `-- name: CreateUser :execresult
INSERT INTO users (username, password) VALUES (?, ?)
`

type CreateUserParams struct {
	Username string
	Password string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUser, arg.Username, arg.Password)
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM sessions WHERE session_id = ?
`

func (q *Queries) DeleteSession(ctx context.Context, sessionID string) error {
	_, err := q.db.ExecContext(ctx, deleteSession, sessionID)
	return err
}

const getSession = `-- name: GetSession :one
SELECT session_id, user_id, expires_at FROM sessions WHERE session_id = ?
`

func (q *Queries) GetSession(ctx context.Context, sessionID string) (Session, error) {
	row := q.db.QueryRowContext(ctx, getSession, sessionID)
	var i Session
	err := row.Scan(&i.SessionID, &i.UserID, &i.ExpiresAt)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, username, password FROM users WHERE id = ?
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(&i.ID, &i.Username, &i.Password)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, password FROM users WHERE username = ?
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(&i.ID, &i.Username, &i.Password)
	return i, err
}
